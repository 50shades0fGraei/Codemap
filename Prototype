# prototype.py
import re
import json
import os

def parse_file(file_path):
    with open(file_path, 'r') as f:
        content = f.read()
    functions = {}
    for i, match in enumerate(re.finditer(r'# role: (\w+)\s*def (\w+)\(', content), 1):
        role, name = match.groups()
        address = f"A{i}"
        functions[address] = {"name": name, "role": role, "file": os.path.basename(file_path)}
    return dict(sorted(functions.items()))  # Sort by address

def generate_codemap():
    data = {"index": {}}
    for file in [f for f in os.listdir('data') if f.endswith('.py')]:
        data["index"].update(parse_file(os.path.join('data', file)))
    with open('codemap.json', 'w') as f:
        json.dump(data, f, indent=2)
    print("Codemap generated with", len(data["index"]), "functions.")

if __name__ == "__main__":
    generate_codemap()
