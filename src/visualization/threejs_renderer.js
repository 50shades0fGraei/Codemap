// src/visualization/threejs_renderer.js
import * as THREE from 'three';

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
camera.position.z = 20;

// Load map data (generated by map_generator.py)
fetch('map_data.json')
    .then(response => response.json())
    .then(data => {
        data.forEach(item => {
            // Create cube for each code line
            const cubeGeometry = new THREE.BoxGeometry(1, 1, 1);
            const cubeMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00, wireframe: true });
            const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
            cube.position.set(...item.coords);
            cube.userData = { address: item.address, code: item.command };
            scene.add(cube);

            // Create streets for subprocesses
            item.subprocesses.forEach(sub => {
                const subData = data.find(d => d.address === sub);
                if (subData) {
                    const streetGeometry = new THREE.BoxGeometry(2, 0.1, 0.1);
                    const streetMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });
                    const street = new THREE.Mesh(streetGeometry, streetMaterial);
                    const midPoint = [
                        (item.coords[0] + subData.coords[0]) / 2,
                        (item.coords[1] + subData.coords[1]) / 2,
                        (item.coords[2] + subData.coords[2]) / 2
                    ];
                    street.position.set(...midPoint);
                    scene.add(street);
                }
            });

            // Create staircases for forks (e.g., up direction)
            if (item.direction === 'up') {
                const stairGeometry = new THREE.CylinderGeometry(0.05, 0.05, 0.5, 32);
                const stairMaterial = new THREE.MeshBasicMaterial({ color: 0x0000ff });
                const stair = new THREE.Mesh(stairGeometry, stairMaterial);
                stair.position.set(item.coords[0], item.coords[1] + 1.5, item.coords[2]);
                stair.rotation.z = Math.PI / 4;
                scene.add(stair);
            }
        });
    });

// Animation
function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
}
animate();

// Click handler for inspection
window.addEventListener('click', (event) => {
    // Raycasting for cube selection (simplified)
    console.log("Inspect cube:", event.target.userData);
});
